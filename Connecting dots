Gary has a board of size NxM. Each cell in the board is a coloured dot. There exist only 26 colours denoted by uppercase Latin characters (i.e. A,B,...,Z). Now Gary is getting bored and wants to play a game. The key of this game is to find a cycle that contain dots of same colour. Formally, we call a sequence of dots d1, d2, ..., dk a cycle if and only if it meets the following condition:
1. These k dots are different: if i ≠ j then di is different from dj.
2. k is at least 4.
3. All dots belong to the same colour.
4. For all 1 ≤ i ≤ k - 1: di and di + 1 are adjacent. Also, dk and d1 should also be adjacent. Cells x and y are called adjacent if they share an edge.
Since Gary is colour blind, he wants your help. Your task is to determine if there exists a cycle on the board.
Input Format :
The first line of input contains two space separated integers N and M, where N is number of rows and M is the number of columns of the board. 
Each of the following N lines contain M characters. Please note that characters are not space separated. Each character is an uppercase Latin letter.
Output Format :
Print true if there is a cycle in the board, else print false.
Constraints :
2 <= N <= 1000
2 <= M <= 1000
Time Limit: 1 second
Sample Input 1:
3 4
AAAA
ABCA
AAAA
Sample Output 1:
true



//System code
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
public class Runner {

    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    
    public static String[] takeInput() throws IOException {
		String[] strNums;
        strNums = br.readLine().split("\\s");

        int N = Integer.parseInt(strNums[0]);
        int M = Integer.parseInt(strNums[1]);

		String[] Graph = new String[N];
		
        for (int i = 0; i < N; ++i) {
            Graph[i] = br.readLine();
        }

        return Graph;
    }

    public static void main(String[] args) throws NumberFormatException, IOException {


        String[] Graph = takeInput();
        if (new Solution().solve(Graph,Graph.length,Graph[0].length())==1){
            System.out.print("true");
        }
        else{
            System.out.print("false");
        }


    }
}

//main code

import java.util.*;
import java.util.HashMap;

public class Solution {

    static boolean output=false;
    public static void printcircular(String graph[],HashMap<Integer, Integer> map, int visited[][] , int count, int row ,int col)
    {
        
        if(row<0 || col<0 || row>=visited.length || col>=visited[0].length)
        {
            return;
            
        }
        
        
        
       
        if(count>=4 && visited[row][col]==1)
        {
            
        
            return;
        }
        
        //   System.out.println(m);
        if(visited[row][col]!=0)
        {   
            return;
        }
        
        
        int i[]={1,0,-1,0};
         int j[]={0,1,0,-1};
     for(int k=0;k<4;k++)
     {
         int x=row+i[k];
         int y=col+j[k];
         
         
        
         if(x>=0 && y>=0 && x<graph.length && y<graph[0].length() && graph[row].charAt(col)==graph[x].charAt(y)  && visited[row][col]==0 && visited[x][y]==0 )
         {     visited[row][col]=count;
           //    visited[x][y]=count+1;
               printcircular(graph,map,visited,count+1, x, y);
               visited[row][col]=0;  // backtracking 
             
         }
         
        if(x>=0 && y>=0 && x<graph.length && y<graph[0].length() && graph[row].charAt(col)==graph[x].charAt(y) && count>=4 && visited[row][col]==0 && visited[x][y]==1)              
         { 
            //special case // this will shows the complete loop exist with count >=4 
            
           visited[row][col]=count;
           output=true;
        //    System.out.print("true");
            
         }
        
       
        //    visited[row][col]=0;
         
         
     }
     
     
        
        
         
            
       /// printcircular(graph)
        
        
        
        
        
        
    }
    
    
    
    
    int solve(String[] board , int n, int m)
	{
		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
	 	 * Taking input and printing output is handled automatically.
        */
     //   System.out.println(m);
        String []graph = new String[n];
        
        for(int i=0;i<n;i++)
        {
            graph[i]= board[i];
        }
      //   System.out.println(n);
       // System.out.println(graph[0].charAt(0)==graph[0].charAt(1));
        HashMap<Integer, Integer> map = new HashMap<>();
        int visited[][] = new int[n][m];
        int count=1;
       // boolean output=false;
     //   printcircular(graph,map,visited,count, 2, 0);
     
        
        
        
        
        
//             for(int i =0;i<visited.length;i++)
//             {
//                 for(int j=0;j<visited[0].length;j++)
//                 {
//                     System.out.print(visited[i][j]+" ");
                        
                    
//                 }
//                   System.out.println();
//             }
        
        
      
        int stopper=0;
        for(int i =0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                
             printcircular(graph,map,visited,count, i, j);
                if(output)
                {    
                  //  System.out.print("true");
                    stopper=1;
                    return 1;
                //    break;
                }
                
            }
            
            if(stopper==1)
            {
                break;
            }
            
        }
        
       if(output==true)
       {
           return 1;
       }
        
        else{
              return 0;
        }
            
          
            //System.out.print("false"); 
        
        
        
        
        
        
        
        
	}
	
	
}


